#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;

our %args;
GetOptions(\%args,
   'help',
   'script_name=s',
   'out_file_name=s',
   'db_name=s',
   'working_dir=s'
);

usage() if $args{'help'};

my @missing = grep {not $args{$_}} qw(script_name working_dir);
if (@missing)
{
   print "missing required argument(s): ".join(", ", @missing)."\n\n";
   usage();
}

my $dir = $args{'working_dir'};
my $main_script = $args{'script_name'};

chdir($dir) or die "\nCheck your directory!\n\nCan't change directory to '$dir' $!\n";
unless ((-e $main_script) && (-r $main_script)){
   die "Check your file \$script_name $!\n";
}

open FILE, "<", $main_script or die "Error reading main file $main_script.\n";

my @header = "-- Processing $main_script on " . &get_timestamp . "\n";
push @header, "-- Do NOT edit this file.  This is generated by a script\n";
push @header, "-- List of files processed\n\n";

my @output = "";

while(<FILE>) {
    if ($_ =~ m/^(\:r|source)/) {
        push @header, "-- $_";
        chomp;
        $_ =~ s/(\:r|source)//;
        $_ =~ s/"//g;
        $_ =~ s/;//g;
        
        push @output, "\n\n\n\n"; #-- # start of <$_> # \n\n\n";
        open (FILE2, "$_") or die "Error reading sub file $_";
        my @content = <FILE2>;
        if ($args{'db_name'}) {
            for my $line (@content) {
               # replace 'Use [XXX]' with db_name
               $line =~ s#\bUse\b\s+(\[|"?)\w+(\]|"?)#Use \[$args{'db_name'}\]#i;
               push @output, $line;
            }
        } else {
            push @output, @content;
        }
        close FILE2;
        #push @output, "\n\n-- # end of <$_> # \n\n";
    }
}
#push @output, "-- Finished processing $main_script on " . &get_timestamp . "\n";
unshift @output, @header;

if ($args{'out_file_name'}) {
    open OUTFILE, ">", $args{'out_file_name'} or die "Error creating "
            . "$args{'out_file_name'}";
    print OUTFILE @output;
    close OUTFILE;
} else {
    print @output;
}

close FILE;

sub get_timestamp {
   my ($sec, $min, $hr, $day, $mon, $year) = localtime;
   
   sprintf("%02d/%02d/%04d %02d:%02d:%02d\n",
            $mon +1, $day, 1900 + $year, $hr, $min, $sec);
}

sub usage {
    print <<END;
usage: $0 --script_name <name of deployment script> --out_file_name <file name> --db_name <name of db>

   script_name      name of the sqlcmd batch script here            REQUIRED
   working_dir      directory path                                  REQUIRED
   out_file_name    name of the file to be created                  OPTIONAL
   db_name          if specified, replaces Use [db] with this name  OPTIONAL

END
   ;
   exit(1);
}